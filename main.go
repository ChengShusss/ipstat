package main

import (
	"bufio"
	"fmt"
	"ip2location/utils"
	"os"
	"regexp"
	"strconv"
	"time"
)

type AccessInfo struct {
	RemoteAddr    string
	TimeLocal     time.Time
	RequestMethod string
	RequestURI    string
	HttpVersion   string
	Status        int
	BodyBytesSent int
	HttpReferer   string
	UserAgent     string
	IpInfo        *utils.IpInfo
}

var (
	input       = "access.log"
	querySource = "ip2location"
)

func main() {

	if len(os.Args) > 1 {
		input = os.Args[1]
	}

	f, err := os.Open(input)
	if err != nil {
		fmt.Printf("failed to open file, err: %v\n", err)
		return
	}
	defer f.Close()

	i := 0
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		i += 1
		info, err := ParseAccessLog(scanner.Text())

		// info, err := GetIpInfo(input)
		if err != nil {
			fmt.Printf("failed, err: %v\n", err)
			continue
		}

		in := info.IpInfo
		fmt.Printf("%d %s from %s, %s\n", i, in.IpAddress, in.CityName, in.CountryName)

	}

	if err := scanner.Err(); err != nil {
		fmt.Println(err)
		return
	}
}

// ParseAccessLog is generated by new bing
func ParseAccessLog(line string) (*AccessInfo, error) {
	re := regexp.MustCompile(`^(\S+) - - \[(.*?)\] "(\S+) (\S+) (\S+)" (\d+) (\d+) "([^"]*)" "([^"]*)" "([^"]*)"$`)
	matches := re.FindStringSubmatch(line)
	if matches == nil {
		return nil, fmt.Errorf("failed to parse access log line: %s", line)
	}

	t, err := time.Parse("02/Jan/2006:15:04:05 -0700", matches[2])
	if err != nil {
		return nil, fmt.Errorf("failed to parse time: %v", err)
	}

	status, err := strconv.Atoi(matches[6])
	if err != nil {
		return nil, fmt.Errorf("failed to parse status: %v", err)
	}

	bodyBytesSent, err := strconv.Atoi(matches[7])
	if err != nil {
		return nil, fmt.Errorf("failed to parse body bytes sent: %v", err)
	}

	var res = &AccessInfo{
		RemoteAddr:    matches[1],
		TimeLocal:     t,
		RequestMethod: matches[3],
		RequestURI:    matches[4],
		HttpVersion:   matches[5],
		Status:        status,
		BodyBytesSent: bodyBytesSent,
		HttpReferer:   matches[8],
		UserAgent:     matches[9],
	}

	ipInfo, err := utils.GetIpInfo(res.RemoteAddr)
	if err != nil {
		return res, err
	}

	res.IpInfo = ipInfo

	return res, nil
}
